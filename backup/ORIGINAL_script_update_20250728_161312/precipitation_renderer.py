#!/usr/bin/env python3
"""
Precipitation Module Renderer
F√∂rsta konkreta implementation av Dynamic Module System

Ansvarar f√∂r rendering av nederb√∂rd-modul med:
- Aktuell nederb√∂rd-status
- Prognostiserad nederb√∂rd (2h fram√•t)  
- Cykel-v√§der varningar
- Timing-information
- Intensitets-beskrivningar
"""

from typing import Dict, List
from .base_renderer import ModuleRenderer

class PrecipitationRenderer(ModuleRenderer):
    """
    Renderer f√∂r nederb√∂rd-modul
    
    Visar nederb√∂rd-information med fokus p√• cykel-v√§der beslut:
    - Varningsikon f√∂r uppm√§rksamhet
    - Nuvarande nederb√∂rd vs. prognostiserad
    - Timing f√∂r n√§r nederb√∂rd v√§ntas
    - Intensitets-beskrivning f√∂r beslutsst√∂d
    """
    
    def render(self, x: int, y: int, width: int, height: int, 
               weather_data: Dict, context_data: Dict) -> bool:
        """
        Rendera nederb√∂rd-modul med cykel-v√§der fokus
        
        Layout:
        ‚ö†Ô∏è  [Huvudstatus]
            [Timing/intensitet]
            [Beslutsst√∂d]
        """
        try:
            self.logger.info(f"üåßÔ∏è Renderar nederb√∂rd-modul ({width}√ó{height})")
            
            # H√§mta nederb√∂rd-data med s√§ker fallback
            precipitation = self.safe_get_value(context_data, 'precipitation', 0.0, float)
            forecast_2h = self.safe_get_value(context_data, 'forecast_precipitation_2h', 0.0, float)
            cycling_weather = self.safe_get_value(weather_data, 'cycling_weather', {}, dict)
            
            # Best√§m huvudstatus och layout
            main_text, status_text, description_text = self._determine_precipitation_status(
                precipitation, forecast_2h, cycling_weather
            )
            
            # === LAYOUT RENDERING ===
            
            # 1. Varningsikon (v√§nster, stort)
            icon_success = self._render_warning_icon(x, y)
            
            # 2. Huvudtext (h√∂ger om ikon)
            text_start_x = x + 60 if icon_success else x + 20
            self._render_main_status(text_start_x, y, width - (text_start_x - x), main_text)
            
            # 3. Status/timing (under huvudtext)
            self._render_status_timing(x, y, width, status_text)
            
            # 4. Beskrivning/intensitet (nederst)
            if description_text:
                self._render_description(x, y, width, height, description_text)
            
            self.logger.info(f"‚úÖ Nederb√∂rd-modul rendered: {main_text}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Fel vid nederb√∂rd rendering: {e}")
            return self.render_fallback_content(x, y, width, height, 
                                               "Nederb√∂rd-data ej tillg√§nglig")
    
    def _determine_precipitation_status(self, precipitation: float, forecast_2h: float, 
                                       cycling_weather: Dict) -> tuple:
        """
        Best√§m status-texter baserat p√• nederb√∂rd-data
        
        Returns:
            Tuple (main_text, status_text, description_text)
        """
        try:
            # P√•g√•ende nederb√∂rd har h√∂gst prioritet
            if precipitation > 0:
                main_text = f"Regnar nu: {precipitation:.1f}mm/h"
                status_text = "P√•g√•ende nederb√∂rd"
                
                # Intensitets-beskrivning
                description_text = self._get_precipitation_intensity_description(precipitation)
                
            # Prognostiserad nederb√∂rd
            elif forecast_2h > 0:
                main_text = f"Regn v√§ntat: {forecast_2h:.1f}mm/h"
                
                # Timing fr√•n cykel-v√§der analys
                forecast_time = cycling_weather.get('forecast_time', 'snart')
                status_text = f"Startar kl {forecast_time}"
                
                # Typ och intensitet
                precip_type = cycling_weather.get('precipitation_type', 'Regn')
                intensity = self._get_precipitation_intensity_description(forecast_2h)
                description_text = f"{intensity} {precip_type.lower()}"
                
            # Fallback (borde inte h√§nda d√• trigger inte skulle vara aktiv)
            else:
                main_text = "Nederb√∂rd detekterad"
                status_text = "Kontrollera aktuell prognos"
                description_text = "Uppdaterar data..."
            
            return main_text, status_text, description_text
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Fel vid status-best√§mning: {e}")
            return "Nederb√∂rd-info", "Data ej tillg√§nglig", ""
    
    def _get_precipitation_intensity_description(self, mm_per_hour: float) -> str:
        """
        Konvertera mm/h till l√§sbar intensitetsbeskrivning
        Samma logik som weather_client.py
        """
        if mm_per_hour < 0.1:
            return "Inget regn"
        elif mm_per_hour < 0.5:
            return "L√§tt duggregn"
        elif mm_per_hour < 1.0:
            return "L√§tt regn"
        elif mm_per_hour < 2.5:
            return "M√•ttligt regn"
        elif mm_per_hour < 10.0:
            return "Kraftigt regn"
        else:
            return "Mycket kraftigt regn"
    
    def _render_warning_icon(self, x: int, y: int) -> bool:
        """
        Rendera varningsikon f√∂r uppm√§rksamhet
        
        Returns:
            True om ikon renderades, False vid fel
        """
        try:
            # F√∂rs√∂k f√∂rst med emoji/unicode
            return self.draw_text_with_fallback(
                (x + 15, y + 15), 
                "‚ö†Ô∏è", 
                self.fonts.get('medium_main', self.fonts.get('small_main')), 
                fill=0
            )
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Varningsikon fel: {e}")
            # Fallback: enkel text
            return self.draw_text_with_fallback(
                (x + 15, y + 15), 
                "!", 
                self.fonts.get('medium_main', self.fonts.get('small_main')), 
                fill=0
            )
    
    def _render_main_status(self, x: int, y: int, max_width: int, main_text: str) -> bool:
        """Rendera huvudstatus-text"""
        try:
            return self.draw_text_with_fallback(
                (x, y + 20), 
                main_text, 
                self.fonts.get('small_main', self.fonts.get('medium_desc')), 
                fill=0,
                max_width=max_width
            )
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Huvudstatus rendering fel: {e}")
            return False
    
    def _render_status_timing(self, x: int, y: int, width: int, status_text: str) -> bool:
        """Rendera status/timing information"""
        try:
            return self.draw_text_with_fallback(
                (x + 20, y + 50), 
                status_text, 
                self.fonts.get('small_desc', self.fonts.get('tiny')), 
                fill=0,
                max_width=width - 40
            )
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Status-timing rendering fel: {e}")
            return False
    
    def _render_description(self, x: int, y: int, width: int, height: int, 
                           description_text: str) -> bool:
        """Rendera beskrivning/intensitet nederst i modulen"""
        try:
            # Placera beskrivning i nedre delen av modulen
            desc_y = y + height - 30  # 30px fr√•n botten
            
            return self.draw_text_with_fallback(
                (x + 20, desc_y), 
                description_text, 
                self.fonts.get('tiny', self.fonts.get('small_desc')), 
                fill=0,
                max_width=width - 40
            )
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Beskrivning rendering fel: {e}")
            return False
    
    def get_required_data_sources(self) -> List[str]:
        """
        Nederb√∂rd-modul beh√∂ver SMHI prognosdata och cykel-v√§der analys
        """
        return ['smhi', 'cycling_weather', 'forecast']
    
    def get_module_info(self) -> Dict:
        """Metadata f√∂r nederb√∂rd-modul"""
        info = super().get_module_info()
        info.update({
            'purpose': 'Nederb√∂rd varningar och cykel-v√§der beslutsst√∂d',
            'triggers': ['precipitation > 0', 'forecast_precipitation_2h > 0.2'],
            'layout_priority': 'Ers√§tter bottom_section vid nederb√∂rd'
        })
        return info