#!/usr/bin/env python3
"""
E-Paper V√§derapp - Med riktiga v√§derdata fr√•n SMHI + Weather Icons + Exakta soltider + NETATMO
Raspberry Pi 3B + Waveshare 4.26" E-Paper HAT (800√ó480)
KOMPLETT: Netatmo lokala sensorer + SMHI prognoser + exakta soltider
FIXED: Korrekt 3-timmars trycktrend med meteorologisk standard
"""

import sys
import os
import json
import time
import math
from datetime import datetime, timedelta
from typing import Dict
from PIL import Image, ImageDraw, ImageFont
import logging

# L√§gg till Waveshare biblioteket i path
sys.path.append(os.path.join(os.path.dirname(__file__), 'e-Paper', 'RaspberryPi_JetsonNano', 'python', 'lib'))

# L√§gg till modules-mappen
sys.path.append('modules')
from weather_client import WeatherClient
from icon_manager import WeatherIconManager

try:
    from waveshare_epd import epd4in26
except ImportError as e:
    print(f"‚ùå Kan inte importera Waveshare bibliotek: {e}")
    print("üîß Kontrollera att E-Paper biblioteket √§r installerat korrekt")
    sys.exit(1)

class EPaperWeatherApp:
    """Huvudklass f√∂r E-Paper v√§derapp med Netatmo + SMHI + Weather Icons + exakta soltider"""
    
    def __init__(self, config_path="config.json"):
        """Initialisera appen med konfiguration och ikon-hantering"""
        print("üå§Ô∏è E-Paper V√§derapp med Netatmo + SMHI + Exakta soltider - Startar...")
        
        # Ladda konfiguration
        self.config = self.load_config(config_path)
        if not self.config:
            sys.exit(1)
            
        # Setup logging
        self.setup_logging()
        
        # Initialisera weather client (nu med full Netatmo + SunCalculator)
        self.weather_client = WeatherClient(self.config)
        
        # Initialisera ikon-hanterare
        self.icon_manager = WeatherIconManager(icon_base_path="icons/")
        
        # Initialisera E-Paper display
        self.epd = None
        self.init_display()
        
        # Skapa canvas f√∂r rendering
        self.width = self.config['layout']['screen_width']
        self.height = self.config['layout']['screen_height']
        self.canvas = Image.new('1', (self.width, self.height), 255)  # Vit bakgrund
        self.draw = ImageDraw.Draw(self.canvas)
        
        # Ladda typsnitt
        self.fonts = self.load_fonts()
        
        print("‚úÖ E-Paper V√§derapp med Netatmo + exakta soltider initialiserad!")
    
    def load_config(self, config_path):
        """Ladda JSON-konfiguration"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            print(f"‚úÖ Konfiguration laddad fr√•n {config_path}")
            return config
        except Exception as e:
            print(f"‚ùå Kan inte ladda konfiguration: {e}")
            return None
    
    def setup_logging(self):
        """Konfigurera logging"""
        log_level = getattr(logging, self.config['debug']['log_level'], logging.INFO)
        logging.basicConfig(
            level=log_level,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('logs/weather.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
        self.logger.info("üîß Logging konfigurerat")
    
    def init_display(self):
        """Initialisera E-Paper display"""
        try:
            self.logger.info("üì± Initialiserar E-Paper display...")
            self.epd = epd4in26.EPD()
            self.epd.init()
            self.epd.Clear()
            self.logger.info("‚úÖ E-Paper display redo")
        except Exception as e:
            self.logger.error(f"‚ùå E-Paper display-fel: {e}")
            if not self.config['debug']['test_mode']:
                sys.exit(1)
    
    def load_fonts(self):
        """Ladda typsnitt f√∂r olika moduler"""
        fonts = {}
        font_path = self.config['display']['font_path']
        font_sizes = self.config['fonts']
        
        try:
            for name, size in font_sizes.items():
                fonts[name] = ImageFont.truetype(font_path, size)
            self.logger.info(f"‚úÖ {len(fonts)} typsnitt laddade")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Typsnitt-fel: {e}, anv√§nder default")
            # Fallback till default font
            for name, size in font_sizes.items():
                fonts[name] = ImageFont.load_default()
        
        return fonts
    
    def clear_canvas(self):
        """Rensa canvas (vit bakgrund)"""
        self.draw.rectangle([(0, 0), (self.width, self.height)], fill=255)
    
    def draw_module_border(self, x, y, width, height, module_name):
        """Rita smarta modulramar som inte dubbleras"""
        # Bara rita vissa sidor f√∂r att undvika dubblering
        if module_name == 'main_weather':
            # HERO: Rita alla sidor
            self.draw.rectangle([(x, y), (x + width, y + height)], outline=0, width=2)
            self.draw.rectangle([(x + 2, y + 2), (x + width - 2, y + height - 2)], outline=0, width=1)
            # Dekorativ linje
            self.draw.line([(x + 8, y + 8), (x + 20, y + 8)], fill=0, width=1)
            self.draw.line([(x + 8, y + 8), (x + 8, y + 20)], fill=0, width=1)
        
        elif module_name == 'barometer_module':
            # MEDIUM 1: Rita alla sidor
            self.draw.rectangle([(x, y), (x + width, y + height)], outline=0, width=2)
            self.draw.rectangle([(x + 2, y + 2), (x + width - 2, y + height - 2)], outline=0, width=1)
            # Dekorativ linje
            self.draw.line([(x + 8, y + 8), (x + 20, y + 8)], fill=0, width=1)
            self.draw.line([(x + 8, y + 8), (x + 8, y + 20)], fill=0, width=1)
        
        elif module_name == 'tomorrow_forecast':
            # MEDIUM 2: Rita alla sidor
            self.draw.rectangle([(x, y), (x + width, y + height)], outline=0, width=2)
            self.draw.rectangle([(x + 2, y + 2), (x + width - 2, y + height - 2)], outline=0, width=1)
            # Dekorativ linje
            self.draw.line([(x + 8, y + 8), (x + 20, y + 8)], fill=0, width=1)
            self.draw.line([(x + 8, y + 8), (x + 8, y + 20)], fill=0, width=1)
        
        elif module_name == 'clock_module':
            # SMALL 1: Rita alla sidor utom h√∂ger (f√∂r att undvika dubblering med status_module)
            # Topp, v√§nster, botten
            self.draw.line([(x, y), (x + width, y)], fill=0, width=2)  # Topp
            self.draw.line([(x, y), (x, y + height)], fill=0, width=2)  # V√§nster
            self.draw.line([(x, y + height), (x + width, y + height)], fill=0, width=2)  # Botten
            # H√∂ger sida - tunnare f√∂r att inte konflikta
            self.draw.line([(x + width, y), (x + width, y + height)], fill=0, width=1)  # H√∂ger (tunn)
            
            # Inre ram
            self.draw.line([(x + 2, y + 2), (x + width - 2, y + 2)], fill=0, width=1)  # Topp
            self.draw.line([(x + 2, y + 2), (x + 2, y + height - 2)], fill=0, width=1)  # V√§nster
            self.draw.line([(x + 2, y + height - 2), (x + width - 2, y + height - 2)], fill=0, width=1)  # Botten
            
            # Dekorativ linje
            self.draw.line([(x + 8, y + 8), (x + 20, y + 8)], fill=0, width=1)
            self.draw.line([(x + 8, y + 8), (x + 8, y + 20)], fill=0, width=1)
        
        elif module_name == 'status_module':
            # SMALL 2: Rita alla sidor utom v√§nster (f√∂r att undvika dubblering med clock_module)
            # Topp, h√∂ger, botten
            self.draw.line([(x, y), (x + width, y)], fill=0, width=2)  # Topp
            self.draw.line([(x + width, y), (x + width, y + height)], fill=0, width=2)  # H√∂ger
            self.draw.line([(x, y + height), (x + width, y + height)], fill=0, width=2)  # Botten
            # V√§nster sida - tunnare f√∂r att inte konflikta
            self.draw.line([(x, y), (x, y + height)], fill=0, width=1)  # V√§nster (tunn)
            
            # Inre ram
            self.draw.line([(x + 2, y + 2), (x + width - 2, y + 2)], fill=0, width=1)  # Topp
            self.draw.line([(x + width - 2, y + 2), (x + width - 2, y + height - 2)], fill=0, width=1)  # H√∂ger
            self.draw.line([(x + 2, y + height - 2), (x + width - 2, y + height - 2)], fill=0, width=1)  # Botten
            
            # Dekorativ linje
            self.draw.line([(x + 8, y + 8), (x + 20, y + 8)], fill=0, width=1)
            self.draw.line([(x + 8, y + 8), (x + 8, y + 20)], fill=0, width=1)
    
    def get_swedish_date(self, date_obj):
        """
        Konvertera datum till svenska veckodagar och m√•nader
        
        Args:
            date_obj: datetime-objekt
            
        Returns:
            Formaterad svensk datumstr√§ng
        """
        swedish_days = {
            'Monday': 'M√•n', 'Tuesday': 'Tis', 'Wednesday': 'Ons', 
            'Thursday': 'Tor', 'Friday': 'Fre', 'Saturday': 'L√∂r', 'Sunday': 'S√∂n'
        }
        
        swedish_months = {
            1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'Maj', 6: 'Jun',
            7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Okt', 11: 'Nov', 12: 'Dec'
        }
        
        english_day = date_obj.strftime('%A')
        swedish_day = swedish_days.get(english_day, english_day[:3])
        
        day_num = date_obj.day
        month_num = date_obj.month
        swedish_month = swedish_months.get(month_num, str(month_num))
        
        return f"{swedish_day} {day_num}/{month_num}"
    
    def truncate_text(self, text, font, max_width):
        """Korta text s√• den f√•r plats inom given bredd"""
        if not text:
            return text
            
        # Kontrollera om texten f√•r plats som den √§r
        bbox = self.draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        
        if text_width <= max_width:
            return text
        
        # F√∂rkorta ord f√∂r ord tills den f√•r plats
        words = text.split()
        for i in range(len(words), 0, -1):
            truncated = ' '.join(words[:i])
            bbox = self.draw.textbbox((0, 0), truncated, font=font)
            truncated_width = bbox[2] - bbox[0]
            
            if truncated_width <= max_width:
                return truncated
        
        # Som sista utv√§g, returnera f√∂rsta ordet
        return words[0] if words else text
    
    def paste_icon_on_canvas(self, icon, x, y):
        """
        S√§tt in ikon p√• canvas p√• given position
        
        Args:
            icon: PIL Image-objekt (1-bit) fr√•n icon_manager
            x, y: Position d√§r ikon ska placeras
        """
        if icon is None:
            return
        
        try:
            # S√§tt in ikon p√• canvas
            # F√∂r 1-bit bilder anv√§nds paste med mask f√∂r transparens
            self.canvas.paste(icon, (x, y))
            
        except Exception as e:
            self.logger.error(f"‚ùå Fel vid ikon-inplacering: {e}")
    
    def parse_sun_data_from_weather(self, weather_data: Dict) -> tuple:
        """
        Parsea soldata fr√•n weather_client och skapa soldata f√∂r ikon-manager
        
        Args:
            weather_data: Komplett v√§derdata fr√•n WeatherClient
            
        Returns:
            Tuple med (sunrise_datetime, sunset_datetime, sun_data_dict)
        """
        try:
            # H√§mta soldata fr√•n weather_client
            sun_data = weather_data.get('sun_data', {})
            
            if not sun_data:
                self.logger.warning("‚ö†Ô∏è Ingen soldata fr√•n WeatherClient, anv√§nder fallback")
                # Fallback till nuvarande tid
                now = datetime.now()
                sunrise = now.replace(hour=6, minute=0, second=0)
                sunset = now.replace(hour=18, minute=0, second=0)
                return sunrise, sunset, {'sunrise': sunrise.isoformat(), 'sunset': sunset.isoformat()}
            
            # Parsea datetime-objekt eller ISO-str√§ngar
            sunrise_time = sun_data.get('sunrise_time')
            sunset_time = sun_data.get('sunset_time')
            
            if not sunrise_time or not sunset_time:
                # F√∂rs√∂k parsea fr√•n ISO-str√§ngar
                sunrise_str = sun_data.get('sunrise')
                sunset_str = sun_data.get('sunset')
                
                if sunrise_str and sunset_str:
                    try:
                        sunrise_time = datetime.fromisoformat(sunrise_str.replace('Z', '+00:00'))
                        sunset_time = datetime.fromisoformat(sunset_str.replace('Z', '+00:00'))
                    except:
                        # Fallback
                        now = datetime.now()
                        sunrise_time = now.replace(hour=6, minute=0, second=0)
                        sunset_time = now.replace(hour=18, minute=0, second=0)
                else:
                    # Sista fallback
                    now = datetime.now()
                    sunrise_time = now.replace(hour=6, minute=0, second=0)
                    sunset_time = now.replace(hour=18, minute=0, second=0)
            
            # Skapa soldata-dict f√∂r ikon-manager
            parsed_sun_data = {
                'sunrise': sunrise_time.isoformat(),
                'sunset': sunset_time.isoformat(),
                'daylight_duration': sun_data.get('daylight_duration', 'N/A'),
                'source': sun_data.get('sun_source', 'unknown')
            }
            
            self.logger.info(f"‚òÄÔ∏è Soldata parsead: {sunrise_time.strftime('%H:%M')} - {sunset_time.strftime('%H:%M')} (k√§lla: {parsed_sun_data['source']})")
            
            return sunrise_time, sunset_time, parsed_sun_data
            
        except Exception as e:
            self.logger.error(f"‚ùå Fel vid parsning av soldata: {e}")
            # Fallback
            now = datetime.now()
            sunrise = now.replace(hour=6, minute=0, second=0)
            sunset = now.replace(hour=18, minute=0, second=0)
            return sunrise, sunset, {'sunrise': sunrise.isoformat(), 'sunset': sunset.isoformat(), 'source': 'error_fallback'}
    
    def format_data_sources(self, weather_data: Dict) -> str:
        """
        NYTT: Formatera datak√§llor f√∂r status-modulen
        
        Args:
            weather_data: V√§derdata med k√§llor
            
        Returns:
            Formaterad str√§ng med datak√§llor
        """
        try:
            sources = []
            
            # Temperatur-k√§lla
            temp_source = weather_data.get('temperature_source', '')
            if temp_source == 'netatmo':
                sources.append("Netatmo")
            elif temp_source == 'smhi':
                sources.append("SMHI")
            
            # Tryck-k√§lla (om olika fr√•n temperatur)
            pressure_source = weather_data.get('pressure_source', '')
            if pressure_source == 'netatmo' and temp_source != 'netatmo':
                if 'Netatmo' not in sources:
                    sources.append("Netatmo")
            elif pressure_source == 'smhi' and temp_source != 'smhi':
                if 'SMHI' not in sources:
                    sources.append("SMHI")
            
            if not sources:
                return "fallback"
            
            return " + ".join(sources)
            
        except Exception as e:
            self.logger.error(f"‚ùå Fel vid formatering av datak√§llor: {e}")
            return "unknown"
    
    def render_weather_layout(self):
        """Rendera layout med Netatmo + SMHI + ikoner + exakta soltider"""
        self.clear_canvas()
        
        # H√§mta riktiga v√§derdata INKLUSIVE Netatmo sensorer
        self.logger.info("üåê H√§mtar v√§derdata fr√•n Netatmo + SMHI + exakta soltider...")
        weather_data = self.weather_client.get_current_weather()
        
        # Parsea exakta soltider fr√•n weather_client
        sunrise, sunset, sun_data = self.parse_sun_data_from_weather(weather_data)
        
        # Aktuell tid f√∂r dag/natt-best√§mning
        current_time = datetime.now()
        
        # Rita alla moduler enligt konfiguration
        modules = self.config['modules']
        
        for module_name, module_config in modules.items():
            if module_config['enabled']:
                x = module_config['coords']['x']
                y = module_config['coords']['y'] 
                width = module_config['size']['width']
                height = module_config['size']['height']
                
                # Rita smarta modulramar
                self.draw_module_border(x, y, width, height, module_name)
                
                # Rita inneh√•ll f√∂r varje modul MED NETATMO + SMHI DATA
                if module_name == 'main_weather':
                    temp = weather_data.get('temperature', 20.0)
                    desc = weather_data.get('weather_description', 'Ok√§nt v√§der')
                    temp_source = weather_data.get('temperature_source', 'fallback')
                    location = weather_data.get('location', 'Ok√§nd plats')
                    smhi_symbol = weather_data.get('weather_symbol', 1)  # SMHI v√§der-symbol
                    
                    # Plats √∂verst i hero-modulen
                    self.draw.text((x + 20, y + 15), location, font=self.fonts['medium_desc'], fill=0)
                    
                    # V√ÑDERIKON med exakt dag/natt-logik
                    weather_icon = self.icon_manager.get_weather_icon_for_time(
                        smhi_symbol, current_time, sun_data, size=(80, 80)
                    )
                    if weather_icon:
                        # Placera ikon till h√∂ger om temperaturen
                        icon_x = x + 320
                        icon_y = y + 50
                        self.paste_icon_on_canvas(weather_icon, icon_x, icon_y)
                    
                    # TEMPERATUR (prioriterat fr√•n Netatmo!)
                    self.draw.text((x + 20, y + 60), f"{temp:.1f}¬∞", font=self.fonts['hero_temp'], fill=0)
                    
                    # Beskrivning (fr√•n SMHI meteorologi)
                    desc_truncated = self.truncate_text(desc, self.fonts['hero_desc'], width - 40)
                    self.draw.text((x + 20, y + 150), desc_truncated, font=self.fonts['hero_desc'], fill=0)
                    
                    # NYTT: Visa temperatur-k√§lla
                    if temp_source == 'netatmo':
                        source_text = "(NETATMO)"
                    elif temp_source == 'smhi':
                        source_text = "(SMHI)"
                    else:
                        source_text = f"({temp_source.upper()})"
                    
                    self.draw.text((x + 20, y + 185), source_text, font=self.fonts['tiny'], fill=0)
                    
                    # EXAKTA SOL-IKONER + tider
                    sunrise_str = sunrise.strftime('%H:%M')
                    sunset_str = sunset.strftime('%H:%M')
                    
                    # Soluppg√•ng - ikon + exakt tid
                    sunrise_icon = self.icon_manager.get_sun_icon('sunrise', size=(40, 40))
                    if sunrise_icon:
                        self.paste_icon_on_canvas(sunrise_icon, x + 20, y + 210)
                        self.draw.text((x + 65, y + 220), sunrise_str, font=self.fonts['medium_desc'], fill=0)
                    else:
                        # Fallback utan ikon
                        self.draw.text((x + 20, y + 220), f"üåÖ {sunrise_str}", font=self.fonts['medium_desc'], fill=0)
                    
                    # Solnedg√•ng - ikon + exakt tid  
                    sunset_icon = self.icon_manager.get_sun_icon('sunset', size=(40, 40))
                    if sunset_icon:
                        self.paste_icon_on_canvas(sunset_icon, x + 160, y + 210)
                        self.draw.text((x + 205, y + 220), sunset_str, font=self.fonts['medium_desc'], fill=0)
                    else:
                        # Fallback utan ikon
                        self.draw.text((x + 160, y + 220), f"üåá {sunset_str}", font=self.fonts['medium_desc'], fill=0)
                    
                    # NYTT: Visa soldata-k√§lla (diskret)
                    sun_source = sun_data.get('source', 'unknown')
                    if sun_source != 'unknown':
                        source_text = f"Sol: {sun_source}"
                        if sun_source == 'ipgeolocation.io':
                            source_text = "Sol: API ‚úì"
                        elif sun_source == 'fallback':
                            source_text = "Sol: approx"
                        self.draw.text((x + 20, y + 250), source_text, font=self.fonts['tiny'], fill=0)
                
                elif module_name == 'barometer_module':
                    # üö® FIXED: Anv√§nd RIKTIGA trycktrend-data fr√•n weather_client
                    pressure = weather_data.get('pressure', 1013)
                    pressure_source = weather_data.get('pressure_source', 'unknown')
                    
                    # ANV√ÑND RIKTIGA TREND-DATA fr√•n weather_client.py
                    pressure_trend = weather_data.get('pressure_trend', {})
                    trend_text = weather_data.get('pressure_trend_text', 'Samlar data')
                    trend_arrow = weather_data.get('pressure_trend_arrow', 'stable')
                    
                    # üéØ LOGGA VAD VI FAKTISKT F√ÖR
                    self.logger.info(f"üîç BAROMETER DEBUG:")
                    self.logger.info(f"  pressure_trend: {pressure_trend}")
                    self.logger.info(f"  trend_text: {trend_text}")
                    self.logger.info(f"  trend_arrow: {trend_arrow}")
                    
                    # Barometer-ikon
                    barometer_icon = self.icon_manager.get_system_icon('barometer', size=(32, 32))
                    if barometer_icon:
                        self.paste_icon_on_canvas(barometer_icon, x + 20, y + 30)
                        # Tryck-v√§rde bredvid ikon (FIXAD position - inte l√§ngre √∂verlappande med pil)
                        self.draw.text((x + 60, y + 40), f"{int(pressure)}", font=self.fonts['medium_main'], fill=0)
                    else:
                        # Fallback utan ikon
                        self.draw.text((x + 20, y + 50), f"{int(pressure)}", font=self.fonts['medium_main'], fill=0)
                    
                    # hPa-text (FIXAD: Flyttad l√§ngre ner f√∂r att inte kollidera med siffran)
                    self.draw.text((x + 60, y + 100), "hPa", font=self.fonts['medium_desc'], fill=0)
                    
                    # RIKTIGA TREND-TEXT (fr√•n 3h-analys) - RADBRYTS OM DET √ÑR "Samlar data"
                    if trend_text == 'Samlar data':
                        self.draw.text((x + 20, y + 125), "Samlar", font=self.fonts['medium_desc'], fill=0)
                        self.draw.text((x + 20, y + 150), "data", font=self.fonts['medium_desc'], fill=0)
                    else:
                        self.draw.text((x + 20, y + 125), trend_text, font=self.fonts['medium_desc'], fill=0)
                    
                    # BONUS: Visa numerisk 3h-f√∂r√§ndring om tillg√§nglig
                    if pressure_trend.get('change_3h') is not None and pressure_trend.get('trend') != 'insufficient_data':
                        change_3h = pressure_trend['change_3h']
                        change_text = f"{change_3h:+.1f} hPa/3h"
                        # Placera under trend-text, anpassat f√∂r radbrytsning
                        change_y = y + 175 if trend_text == 'Samlar data' else y + 150
                        self.draw.text((x + 20, change_y), change_text, font=self.fonts['small_desc'], fill=0)
                    
                    # TREND-PIL fr√•n Weather Icons - FIXAD position f√∂r att undvika avklippning
                    trend_icon = self.icon_manager.get_pressure_icon(trend_arrow, size=(56, 56))  # Optimal storlek f√∂r tydlighet
                    if trend_icon:
                        # H√∂ger sida av modulen, men h√∂gre upp f√∂r att undvika avklippning
                        trend_x = x + width - 65  # 65px fr√•n h√∂ger kant
                        trend_y = y + 100  # H√∂gre upp f√∂r att ge utrymme f√∂r hela pilen (56px h√∂g)
                        self.paste_icon_on_canvas(trend_icon, trend_x, trend_y)
                    
                    # NYTT: Visa tryck-k√§lla (diskret) - FLYTTAD F√ñR ATT INTE KOLLIDERA MED PIL
                    if pressure_source == 'netatmo':
                        self.draw.text((x + 20, y + height - 20), "(Netatmo)", font=self.fonts['tiny'], fill=0)
                    elif pressure_source == 'smhi':
                        self.draw.text((x + 20, y + height - 20), "(SMHI)", font=self.fonts['tiny'], fill=0)
                
                elif module_name == 'tomorrow_forecast':
                    tomorrow = weather_data.get('tomorrow', {})
                    tomorrow_temp = tomorrow.get('temperature', 18.0)
                    tomorrow_desc = tomorrow.get('weather_description', 'Ok√§nt')
                    tomorrow_symbol = tomorrow.get('weather_symbol', 3)
                    
                    # "Imorgon" titel
                    self.draw.text((x + 20, y + 30), "Imorgon", font=self.fonts['medium_desc'], fill=0)
                    
                    # Imorgon v√§derikon
                    tomorrow_icon = self.icon_manager.get_weather_icon(tomorrow_symbol, is_night=False, size=(32, 32))
                    if tomorrow_icon:
                        self.paste_icon_on_canvas(tomorrow_icon, x + 180, y + 30)
                    
                    # Temperatur (alltid fr√•n SMHI-prognos)
                    self.draw.text((x + 20, y + 80), f"{tomorrow_temp:.1f}¬∞", font=self.fonts['medium_main'], fill=0)
                    
                    # V√§derbeskrivning
                    desc_truncated = self.truncate_text(tomorrow_desc, self.fonts['small_desc'], width - 60)
                    self.draw.text((x + 20, y + 130), desc_truncated, font=self.fonts['small_desc'], fill=0)
                    
                    # NYTT: Visa att det √§r SMHI-prognos
                    self.draw.text((x + 20, y + 155), "(SMHI prognos)", font=self.fonts['tiny'], fill=0)
                
                elif module_name == 'clock_module':
                    now = datetime.now()
                    
                    # Klockikon
                    clock_icon = self.icon_manager.get_system_icon('clock3', size=(24, 24))
                    if clock_icon:
                        self.paste_icon_on_canvas(clock_icon, x + 10, y + 18)
                        self.draw.text((x + 40, y + 20), now.strftime('%H:%M'), font=self.fonts['small_main'], fill=0)
                    else:
                        self.draw.text((x + 10, y + 20), now.strftime('%H:%M'), font=self.fonts['small_main'], fill=0)
                    
                    # Svenska datum
                    swedish_date = self.get_swedish_date(now)
                    self.draw.text((x + 10, y + 60), swedish_date, font=self.fonts['small_desc'], fill=0)
                
                elif module_name == 'status_module':
                    update_time = datetime.now().strftime('%H:%M')
                    
                    # Status med ikon
                    status_icon = self.icon_manager.get_system_icon('status_ok', size=(12, 12))
                    if status_icon:
                        self.paste_icon_on_canvas(status_icon, x + 10, y + 18)
                        self.draw.text((x + 25, y + 20), "Status: OK", font=self.fonts['small_desc'], fill=0)
                    else:
                        self.draw.text((x + 10, y + 20), "Status: ‚úì OK", font=self.fonts['small_desc'], fill=0)
                    
                    # Update-ikon
                    update_icon = self.icon_manager.get_system_icon('update', size=(12, 12))
                    if update_icon:
                        self.paste_icon_on_canvas(update_icon, x + 10, y + 43)
                        self.draw.text((x + 25, y + 45), f"Update: {update_time}", font=self.fonts['small_desc'], fill=0)
                    else:
                        self.draw.text((x + 10, y + 45), f"Update: {update_time}", font=self.fonts['small_desc'], fill=0)
                    
                    # UPPDATERAD: Visa intelligenta datak√§llor
                    data_sources = self.format_data_sources(weather_data)
                    self.draw.text((x + 10, y + 70), f"Data: {data_sources}", font=self.fonts['small_desc'], fill=0)
        
        self.logger.info("üé® Layout renderad med Netatmo + SMHI + Weather Icons + exakta soltider")
        
        # Debug: Visa datak√§llor i log
        temp_source = weather_data.get('temperature_source', 'unknown')
        pressure_source = weather_data.get('pressure_source', 'unknown')
        sources = weather_data.get('data_sources', [])
        
        # NYTT: Logga trycktrend-information MED DETALJERAD DEBUG
        pressure_trend = weather_data.get('pressure_trend', {})
        if pressure_trend:
            self.logger.info(f"üìä KOMPLETT pressure_trend data: {pressure_trend}")
            
            if pressure_trend.get('trend') not in ['unknown', 'insufficient_data', 'error']:
                trend_info = f"{pressure_trend.get('change_3h', 0.0):+.1f} hPa/3h ‚Üí {pressure_trend.get('trend', 'unknown')}"
                self.logger.info(f"üìä 3h-Trycktrend: {trend_info}")
            else:
                self.logger.info(f"üìä Trycktrend inte tillg√§nglig: {pressure_trend.get('trend', 'unknown')} (data: {pressure_trend.get('data_hours', 0.0):.1f}h)")
        
        self.logger.info(f"üìä Datak√§llor - Temp: {temp_source}, Tryck: {pressure_source}, Alla: {sources}")
        
        if 'sun_data' in weather_data:
            sun_info = weather_data['sun_data']
            self.logger.info(f"‚òÄÔ∏è Soldata: {sunrise.strftime('%H:%M')}-{sunset.strftime('%H:%M')} ({sun_info.get('daylight_duration', 'N/A')}) fr√•n {sun_info.get('sun_source', 'unknown')}")
    
    def display_canvas(self):
        """Visa canvas p√• E-Paper display"""
        try:
            if self.epd and not self.config['debug']['test_mode']:
                self.logger.info("üì± Uppdaterar E-Paper display...")
                self.epd.display(self.epd.getbuffer(self.canvas))
                self.logger.info("‚úÖ E-Paper display uppdaterad")
            else:
                self.logger.info("üß™ Test-l√§ge: Sparar bild ist√§llet f√∂r display")
                
            # ALLTID spara screenshot f√∂r visning
            self.save_screenshot()
                
        except Exception as e:
            self.logger.error(f"‚ùå Display-fel: {e}")
    
    def save_screenshot(self):
        """Spara screenshot av aktuell rendering"""
        try:
            # Skapa screenshots-mapp om den inte finns
            screenshot_dir = "screenshots"
            if not os.path.exists(screenshot_dir):
                os.makedirs(screenshot_dir)
            
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            
            # Spara original 1-bit format
            original_filename = f"{screenshot_dir}/1bit_epaper_{timestamp}.png"
            self.canvas.save(original_filename)
            
            # Konvertera till RGB f√∂r b√§ttre visning
            rgb_canvas = self.canvas.convert('RGB')
            rgb_filename = f"{screenshot_dir}/epaper_{timestamp}.png"
            rgb_canvas.save(rgb_filename)
            
            self.logger.info(f"üì∏ Screenshot sparad: {rgb_filename}")
            print(f"üì∏ Screenshot: {rgb_filename}")
            
        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è Screenshot-fel: {e}")
    
    def run_weather_app(self):
        """K√∂r v√§derapp med Netatmo + SMHI + ikoner + exakta soltider"""
        try:
            self.logger.info("üå§Ô∏è Startar E-Paper v√§derapp med Netatmo integration...")
            
            # Rendera v√§der-layout med alla datak√§llor
            self.render_weather_layout()
            
            # Visa p√• display
            self.display_canvas()
            
            print("\n" + "="*60)
            print("‚úÖ E-PAPER V√ÑDERAPP MED NETATMO INTEGRATION!")
            print("üì± Kontrollera E-Paper display f√∂r komplett v√§derdata")
            print("üìÅ Loggar: logs/weather.log")
            print("üì∏ Screenshots: screenshots/epaper_*.png")
            print("üè† Netatmo: Temperatur (utomhus) + Lufttryck (inomhus)")
            print("üå§Ô∏è SMHI: V√§der, prognoser, vind, nederb√∂rd")
            print("‚òÄÔ∏è Exakta soltider fr√•n ipgeolocation.io API")
            print("üé® Weather Icons med fallback-system")
            print("üß† Intelligent datakombination: Lokalt + Prognoser")
            print("üìä FIXED: 3-timmars trycktrend med meteorologisk standard")
            print("="*60)
            
        except Exception as e:
            self.logger.error(f"‚ùå V√§derapp misslyckades: {e}")
            raise
    
    def cleanup(self):
        """St√§da upp resurser"""
        try:
            if self.epd:
                self.epd.sleep()
            
            # Rensa ikon-cache
            if hasattr(self, 'icon_manager'):
                self.icon_manager.clear_cache()
                
            self.logger.info("üßπ Cleanup genomf√∂rd")
        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è Cleanup-fel: {e}")

def main():
    """Huvudfunktion"""
    app = None
    try:
        # Skapa och k√∂r v√§derapp med Netatmo + alla funktioner
        app = EPaperWeatherApp()
        app.run_weather_app()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Avbruten av anv√§ndare")
    except Exception as e:
        print(f"‚ùå Kritiskt fel: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if app:
            app.cleanup()

if __name__ == "__main__":
    main()
