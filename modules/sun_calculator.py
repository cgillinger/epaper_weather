#!/usr/bin/env python3
"""
SunCalculator - Exakta soltider fr√•n ipgeolocation.io API
Baserad p√• V√§derdisplay-projektets implementation
Ers√§tter f√∂renklad algoritm med verkliga soltider
"""

import os
import json
import time
import math
import requests
import logging
from datetime import datetime, date, timedelta
from typing import Dict, Optional, Any

class SunCalculator:
    """
    Ber√§knar exakta soltider med ipgeolocation.io API
    Baserad p√• V√§derdisplay-projektets utils.py
    """
    
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialisera SunCalculator
        
        Args:
            api_key: ipgeolocation.io API-nyckel (samma som V√§derdisplay)
        """
        # Samma API-nyckel som V√§derdisplay-projektet
        self.api_key = api_key or "8fd423c5ca0c49f198f9598baeb5a059"
        self.api_base_url = "https://api.ipgeolocation.io/astronomy"
        
        # Cache-konfiguration (24h cache som V√§derdisplayen)
        self.cache_file = "cache/sun_cache.json"
        self.cache_duration_hours = 24
        
        # Setup logging
        self.logger = logging.getLogger(__name__)
        
        # Skapa cache-mapp om den inte finns
        cache_dir = os.path.dirname(self.cache_file)
        if cache_dir and not os.path.exists(cache_dir):
            os.makedirs(cache_dir)
            
        print(f"‚òÄÔ∏è SunCalculator initierad med ipgeolocation.io API")
    
    def get_sun_times(self, latitude: float, longitude: float, target_date: Optional[date] = None) -> Dict[str, Any]:
        """
        H√§mta exakta soltider f√∂r given plats och datum
        
        Args:
            latitude: Latitud (ex: 59.3293 f√∂r Stockholm)
            longitude: Longitud (ex: 18.0686 f√∂r Stockholm)
            target_date: Datum att h√§mta soltider f√∂r (default: idag)
            
        Returns:
            Dict med soldata: {
                'sunrise': '2025-07-24T03:27:15',
                'sunset': '2025-07-24T20:32:41',
                'sunrise_time': datetime-objekt,
                'sunset_time': datetime-objekt,
                'daylight_duration': '17h 5m',
                'source': 'ipgeolocation.io' eller 'fallback',
                'cached': True/False
            }
        """
        if target_date is None:
            target_date = date.today()
            
        # Kontrollera cache f√∂rst
        cache_key = f"{latitude}_{longitude}_{target_date.isoformat()}"
        cached_data = self._get_cached_data(cache_key)
        
        if cached_data:
            self.logger.info(f"‚òÄÔ∏è Anv√§nder cachade soltider f√∂r {target_date}")
            return cached_data
        
        # F√∂rs√∂k h√§mta fr√•n API
        try:
            api_data = self._fetch_from_api(latitude, longitude, target_date)
            if api_data:
                # Cacha resultatet
                self._save_to_cache(cache_key, api_data)
                self.logger.info(f"‚òÄÔ∏è Nya soltider h√§mtade fr√•n API f√∂r {target_date}")
                return api_data
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è API-fel f√∂r soltider: {e}")
        
        # Fallback till f√∂renklad ber√§kning
        self.logger.info("‚òÄÔ∏è Anv√§nder fallback-ber√§kning f√∂r soltider")
        fallback_data = self._calculate_fallback(latitude, longitude, target_date)
        
        # Cacha √§ven fallback (kortare tid)
        fallback_data['cached'] = False
        self._save_to_cache(cache_key, fallback_data, cache_hours=2)
        
        return fallback_data
    
    def _fetch_from_api(self, latitude: float, longitude: float, target_date: date) -> Optional[Dict[str, Any]]:
        """
        H√§mta soltider fr√•n ipgeolocation.io API
        
        Args:
            latitude: Latitud
            longitude: Longitud  
            target_date: Datum
            
        Returns:
            Dict med API-data eller None vid fel
        """
        try:
            # Samma API-anrop som V√§derdisplayen
            params = {
                'apiKey': self.api_key,
                'lat': latitude,
                'long': longitude,
                'date': target_date.isoformat()
            }
            
            self.logger.debug(f"üåê API-anrop: {self.api_base_url} f√∂r {latitude}, {longitude}")
            
            response = requests.get(self.api_base_url, params=params, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            
            # Parsea API-svar
            if 'sunrise' in data and 'sunset' in data:
                return self._parse_api_response(data, target_date)
            else:
                self.logger.warning(f"‚ö†Ô∏è Ofullst√§ndig API-data: {data}")
                return None
                
        except requests.exceptions.RequestException as e:
            self.logger.error(f"‚ùå API-anropsfel: {e}")
            return None
        except (KeyError, ValueError) as e:
            self.logger.error(f"‚ùå API-parsningsfel: {e}")
            return None
    
    def _parse_api_response(self, api_data: Dict, target_date: date) -> Dict[str, Any]:
        """
        Parsea API-svar till standardformat
        
        Args:
            api_data: R√• API-data
            target_date: Datum
            
        Returns:
            Standardiserat soldata-dict
        """
        try:
            # API returnerar tider i format "03:27" eller "03:27:15"
            sunrise_str = api_data['sunrise']
            sunset_str = api_data['sunset']
            
            # Konvertera till full ISO-format med datum
            sunrise_time = self._parse_time_string(sunrise_str, target_date)
            sunset_time = self._parse_time_string(sunset_str, target_date)
            
            # Ber√§kna dagsljusl√§ngd
            daylight_duration = self._calculate_daylight_duration(sunrise_time, sunset_time)
            
            return {
                'sunrise': sunrise_time.isoformat(),
                'sunset': sunset_time.isoformat(),
                'sunrise_time': sunrise_time,
                'sunset_time': sunset_time,
                'daylight_duration': daylight_duration,
                'source': 'ipgeolocation.io',
                'cached': False,
                'api_raw': api_data  # F√∂r debug
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Fel vid parsning av API-data: {e}")
            raise
    
    def _parse_time_string(self, time_str: str, target_date: date) -> datetime:
        """
        Konvertera tidstr√§ng fr√•n API till datetime-objekt
        
        Args:
            time_str: Tid fr√•n API (ex: "03:27" eller "03:27:15")
            target_date: Datum
            
        Returns:
            datetime-objekt
        """
        try:
            # Hantera olika format fr√•n API
            if len(time_str.split(':')) == 2:
                # Format: "03:27"
                hour, minute = map(int, time_str.split(':'))
                second = 0
            else:
                # Format: "03:27:15"
                hour, minute, second = map(int, time_str.split(':'))
            
            return datetime.combine(target_date, datetime.min.time().replace(
                hour=hour, minute=minute, second=second
            ))
            
        except Exception as e:
            self.logger.error(f"‚ùå Fel vid parsning av tid '{time_str}': {e}")
            # Fallback: midnatt
            return datetime.combine(target_date, datetime.min.time())
    
    def _calculate_daylight_duration(self, sunrise: datetime, sunset: datetime) -> str:
        """
        Ber√§kna dagsljusl√§ngd i timmar och minuter
        
        Args:
            sunrise: Soluppg√•ng datetime
            sunset: Solnedg√•ng datetime
            
        Returns:
            Formaterad str√§ng (ex: "17h 5m")
        """
        try:
            duration = sunset - sunrise
            total_seconds = int(duration.total_seconds())
            
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            
            return f"{hours}h {minutes}m"
            
        except Exception as e:
            self.logger.error(f"‚ùå Fel vid ber√§kning av dagsljusl√§ngd: {e}")
            return "N/A"
    
    def _calculate_fallback(self, latitude: float, longitude: float, target_date: date) -> Dict[str, Any]:
        """
        Fallback-ber√§kning med f√∂renklad algoritm (samma som nuvarande main.py)
        
        Args:
            latitude: Latitud
            longitude: Longitud
            target_date: Datum
            
        Returns:
            Dict med fallback-data
        """
        try:
            # Samma algoritm som nuvarande main.py
            day_of_year = target_date.timetuple().tm_yday
            
            # Solens deklination
            P = math.asin(0.39795 * math.cos(0.01723 * (day_of_year - 173)))
            
            # Latitud i radianer
            lat_rad = math.radians(latitude)
            
            # Timvinkel f√∂r soluppg√•ng/nedg√•ng
            try:
                argument = -math.tan(lat_rad) * math.tan(P)
                argument = max(-0.99, min(0.99, argument))
                H = math.acos(argument)
            except:
                H = 0
            
            # Lokal tid f√∂r soluppg√•ng och solnedg√•ng
            sunrise_hour = 12 - (H * 12 / math.pi)
            sunset_hour = 12 + (H * 12 / math.pi)
            
            # Konvertera till datetime objekt
            sunrise_time = datetime.combine(target_date, datetime.min.time()) + timedelta(hours=sunrise_hour)
            sunset_time = datetime.combine(target_date, datetime.min.time()) + timedelta(hours=sunset_hour)
            
            # Ber√§kna dagsljusl√§ngd
            daylight_duration = self._calculate_daylight_duration(sunrise_time, sunset_time)
            
            return {
                'sunrise': sunrise_time.isoformat(),
                'sunset': sunset_time.isoformat(),
                'sunrise_time': sunrise_time,
                'sunset_time': sunset_time,
                'daylight_duration': daylight_duration,
                'source': 'fallback',
                'cached': False
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Fel vid fallback-ber√§kning: {e}")
            # Sista utv√§g: statiska tider
            now = datetime.now()
            sunrise_time = now.replace(hour=6, minute=0, second=0)
            sunset_time = now.replace(hour=18, minute=0, second=0)
            
            return {
                'sunrise': sunrise_time.isoformat(),
                'sunset': sunset_time.isoformat(),
                'sunrise_time': sunrise_time,
                'sunset_time': sunset_time,
                'daylight_duration': '12h 0m',
                'source': 'static_fallback',
                'cached': False
            }
    
    def _get_cached_data(self, cache_key: str) -> Optional[Dict[str, Any]]:
        """
        H√§mta data fr√•n cache om tillg√§nglig och giltig
        
        Args:
            cache_key: Nyckel f√∂r cache-uppslagning
            
        Returns:
            Cachad data eller None
        """
        try:
            if not os.path.exists(self.cache_file):
                return None
                
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            if cache_key not in cache_data:
                return None
            
            entry = cache_data[cache_key]
            
            # Kontrollera om cache √§r giltig
            cache_time = datetime.fromisoformat(entry['cached_at'])
            cache_age_hours = (datetime.now() - cache_time).total_seconds() / 3600
            
            max_age = entry.get('cache_hours', self.cache_duration_hours)
            
            if cache_age_hours < max_age:
                # Konvertera tillbaka till datetime-objekt
                entry['data']['sunrise_time'] = datetime.fromisoformat(entry['data']['sunrise'])
                entry['data']['sunset_time'] = datetime.fromisoformat(entry['data']['sunset'])
                entry['data']['cached'] = True
                
                return entry['data']
            else:
                self.logger.debug(f"üóëÔ∏è Cache utg√•ngen f√∂r {cache_key} ({cache_age_hours:.1f}h)")
                return None
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Cache-l√§sningsfel: {e}")
            return None
    
    def _save_to_cache(self, cache_key: str, data: Dict[str, Any], cache_hours: Optional[int] = None):
        """
        Spara data i cache
        
        Args:
            cache_key: Nyckel f√∂r cache
            data: Data att cacha
            cache_hours: Cache-tid i timmar (default: 24h)
        """
        try:
            # Ladda befintlig cache
            cache_data = {}
            if os.path.exists(self.cache_file):
                try:
                    with open(self.cache_file, 'r', encoding='utf-8') as f:
                        cache_data = json.load(f)
                except:
                    cache_data = {}
            
            # F√∂rbered data f√∂r JSON (ta bort datetime-objekt)
            json_data = data.copy()
            json_data.pop('sunrise_time', None)
            json_data.pop('sunset_time', None)
            
            # L√§gg till cache-metadata
            cache_data[cache_key] = {
                'data': json_data,
                'cached_at': datetime.now().isoformat(),
                'cache_hours': cache_hours or self.cache_duration_hours
            }
            
            # Spara till fil
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(cache_data, f, indent=2, ensure_ascii=False)
                
            self.logger.debug(f"üíæ Soldata cachad f√∂r {cache_key}")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Cache-sparningsfel: {e}")
    
    def clear_cache(self):
        """Rensa all cache"""
        try:
            if os.path.exists(self.cache_file):
                os.remove(self.cache_file)
                print("üóëÔ∏è Soldata-cache rensad")
            else:
                print("üí≠ Ingen cache att rensa")
        except Exception as e:
            self.logger.error(f"‚ùå Fel vid cache-rensning: {e}")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """
        F√• statistik om cache
        
        Returns:
            Dict med cache-info
        """
        try:
            if not os.path.exists(self.cache_file):
                return {'entries': 0, 'file_exists': False}
            
            with open(self.cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            
            # R√§kna giltiga vs utg√•ngna entries
            now = datetime.now()
            valid_entries = 0
            expired_entries = 0
            
            for cache_key, entry in cache_data.items():
                try:
                    cache_time = datetime.fromisoformat(entry['cached_at'])
                    cache_age_hours = (now - cache_time).total_seconds() / 3600
                    max_age = entry.get('cache_hours', self.cache_duration_hours)
                    
                    if cache_age_hours < max_age:
                        valid_entries += 1
                    else:
                        expired_entries += 1
                except:
                    expired_entries += 1
            
            return {
                'entries': len(cache_data),
                'valid_entries': valid_entries,
                'expired_entries': expired_entries,
                'file_exists': True
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå Fel vid cache-statistik: {e}")
            return {'entries': 0, 'error': str(e)}


def test_sun_calculator():
    """Test SunCalculator med Stockholm-koordinater"""
    print("üß™ Testar SunCalculator...")
    
    # Skapa calculator
    sun_calc = SunCalculator()
    
    # Test Stockholm
    stockholm_lat = 59.3293
    stockholm_lon = 18.0686
    
    print(f"üìç Testar f√∂r Stockholm ({stockholm_lat}, {stockholm_lon})")
    
    # H√§mta soltider
    sun_data = sun_calc.get_sun_times(stockholm_lat, stockholm_lon)
    
    print("\n‚òÄÔ∏è Soldata-resultat:")
    print(f"  üåÖ Soluppg√•ng: {sun_data['sunrise']}")
    print(f"  üåá Solnedg√•ng: {sun_data['sunset']}")
    print(f"  ‚è±Ô∏è Dagsljusl√§ngd: {sun_data['daylight_duration']}")
    print(f"  üîç K√§lla: {sun_data['source']}")
    print(f"  üíæ Cachad: {sun_data['cached']}")
    
    # Cache-statistik
    cache_stats = sun_calc.get_cache_stats()
    print(f"\nüíæ Cache-statistik: {cache_stats}")
    
    return sun_calc


if __name__ == "__main__":
    test_sun_calculator()
